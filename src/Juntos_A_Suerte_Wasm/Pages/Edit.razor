@page "/edit/{id:int}"
@inject TeamService teamService
@inject NotificationService notify
@inject NavigationManager navigate

@if (team != null)
{
    <div class="modal show d-block z-index-1050" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered z-index-1060">
            <div class="modal-content">
                <div class="modal-header">
                    <h2 class="modal-title">Editar Equipo</h2>
                    <button type="button" class="btn-close" @onclick="HideTeamModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@team" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />

                        <div class="card-body">
                            <div class="mb-3">
                                <label class="form-label" for="name"><strong>Nombre del Equipo:</strong></label>
                                <InputText id="name" class="form-control" @bind-Value="team.Name" />
                                <ValidationMessage For="@(() => team.Name)" />
                            </div>
                        </div>
                        <div class="card-footer d-flex justify-content-center">
                            <button type="button" class="btn btn-secondary" @onclick="HideTeamModal">Cancelar</button>
                            <button type="submit" class="btn btn-primary">
                                <i /> Guardar
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show z-index-1040"></div>
}


@code {
    [Parameter]
    public int id { get; set; }
    private Team team = null;
    protected override async Task OnInitializedAsync()
    {
        await LoadTeam();
    }

    private async Task LoadTeam()
    {
        var teams = await teamService.GetTeamsAsync();
        team = teams.Find(t => t.TeamId == id);

        if (team == null)
        {
            notify.ShowNotification(title: "Error", message: "Equipo no encontrado", NotificationSeverity.Error);
            navigate.NavigateTo("/");
        }
    }

    private async Task HandleValidSubmit()
    {
        var result = await teamService.UpdateTeamAsync(team);

        if (result)
        {
            notify.ShowNotification(title: "Guardado", message: "Equipo actualizado con éxito", NotificationSeverity.Success);
            navigate.NavigateTo("/");
        }
        else
        {
            notify.ShowNotification(title: "Error", message: "No se pudo actualizar el equipo", NotificationSeverity.Error);
        }
    }

    private void HideTeamModal()
    {
        navigate.NavigateTo("/");
    }
}
